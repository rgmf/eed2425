* ¿Qué es un entorno de desarrollo?
Explicar qué es un entorno de desarrollo tal como está en la documentación, poniendo especial énfasis en:
- LSP
- Linter
- Formateadores  
* Vi
** Ninja Training
Veamos cómo usar el editor de texto (código) Vi, en una práctica guiada que vamos haciendo todos al mismo tiempo.
** Práctica
Que hagan una práctica en la que tienen que emplear Vi para hacer una serie de ediciones.
* NeoVim
** Ejercicio guiado
En la carpeta de la práctica anterior de Vi tengo un fichero de configuración de NeoVim.
Podemos entrar a la VM de Debian para configurar NeoVim y ver cómo funciona a nivel básico.
* Visual Studio Code: LSP, linter y formatter
** Ejercicio guiado
Con el objetivo de interiorizar qué son los LSP, linter y formatter, vamos a usar VSCode. Estos son los pasos a realizar:
1. Partimos de una instalación limpia, sin plugins
2. Escribimos un programa en Java, en una carpeta, un *Main.java* y producimos errores (veremos que no nos avisa de tales errores)
3. Instalamos el LSP de Oracle que se llama: *Java* (Java Platform Extension for Visual Studio Code), de *oracle.com*
4. Es probable que tengamos que configurar el LSP anterior para indicarle dónde está nuestro JDK
5. Al instalar y habilitar el plugin vemos que, ahora, podemos:
   - Ver errores de sintaxis conforme los cometemos
   - Autocompletado de código
   - Ejecutar desde el editor de código
** Práctica
Que hagan la práctica en la que tienen que configurar VSCode para que puedan revisar el código de un programa hecho en Kotlin.
* Construcción y ejecución de programa en Java multi-fichero
** Ninja Training
Partimos de un proyecto multi-fichero, todo en la misma carpeta y sin paquetes ni nada. Tenemos tres ficheros:
- Main.java
- Tarea.java
- GestorTareas.java

Este Ninja Training va a ser una práctica guiada en la que yo, y todo el alumnado, vamos a realizar todos estos pasos y voy explicando qué hace cada paso.

*** Paso 1: compilar y ejecutar (todo en la misma carpeta)
Compilar:
#+begin_src shell
  $ javac *.java
#+end_src

Ejecutar (el fichero con el main)
#+begin_src shell
  $ java Main
#+end_src

*** Paso 2: compilar y construir en otra carpeta
Vamos a reestructurar nuestro proyecto por lo siguiente (se parece más a lo que estamos acostumbrados a ver):

project/
|-- src/
|    |-- Tarea.java
|    |-- GestorTareas.java
|    |-- Main.java
|-- build/
|-- README.md

Compilamos/construímos desde la raíz del proyecto para dejar los resultados *.class en la carpeta build:
#+begin_src shell
  $ javac -d build src/*.java
#+end_src

Ahora podemos ejecutar el programa con la opción ~-cp~ (~classpath~):
#+begin_src shell
  $ java -cp build Main
#+end_src

** Práctica: construir proyecto de Java básico
Hacen una práctica parecida al Ninja Training anterior.
* Paquetes y construcción de programas
** Ninja Training
En este Ninja Training vamos a ver qué son los paquetes en Java y qué función cumplen.

*** Paso 1: problema
Partimos de este proyecto:

project/
├── build
├── README.md
└── src
    ├── hw1
    │   └── HelloWorld.java
    ├── hw2
    │   └── HelloWorld.java
    └── Main.java

Veremos como al compilar el proyecto del Ninja Training obtenemos este error:

#+begin_src shell
  $ javac src/Main.java src/hw1/HelloWorld.java src/hw2/HelloWorld.java 
  src/hw2/HelloWorld.java:1: error: duplicate class: HelloWorld
    public class HelloWorld {
           ^
    src/Main.java:4: error: cannot find symbol
            hw.saludar();
              ^
    symbol:   method saludar()
    location: variable hw of type HelloWorld
  2 errors
#+end_src

*** Paso 2: solución
Reestructuramos la jerarquía de directorios para adaptarla a la jerarquía estándar cuando se usan paquetes.

Se sigue una convención de nomenclatura y una estructura de directorios que es estándar y ampliamente aceptada. Esta estructura ayuda a organizar el código de manera lógica y a evitar conflictos de nombres.

Detalles de la estructura:
- *Raíz de proyecto*: ~src/main/java~ (esta es la estructura de Maven o Gradle, y al que vamos a usar nosotros)
- *Prefijo único de paquete*: se usa un dominio al revés. Por ejemplo, si una empresa/organización tiene como dominio ~miempresa.com~, el prefijo del paquete es ~com.miempresa~
- *Paquetes:* cada parte del nombre del paquete se convierte en subdirectorios y se pueden añadir, a partir del prefijo anterior, todos los subdirectorios que se necesiten y se consideren oportunos

Por ejemplo, si partimos de mi dominio ~proferoman.com~, el proyecto anterior lo podríamos organizar así:

project/
├── build
├── README.md
└── src
    └── main
        └── java
            └── com
                └── proferoman
                    ├── hw1
                    │   └── HelloWorld.java
                    ├── hw2
                    │   └── HelloWorld.java
                    └── Main.java

Y, ahora, cada fichero tiene que empezar con la instruccion ~package~ con el nombre del paquete al que forma parte ese fichero. Al compilar veremos que hay un error porque, ahora, es necesario importar la clase que queremos usar.

Tras importar, entonces sí, ahora ya podemos compilar sin problema:

#+begin_src shell
  $ javac -d build src/main/java/com/proferoman/Main.java src/main/java/com/proferoman/hw1/HelloWorld.java src/main/java/com/proferoman/hw2/HelloWorld.jav
#+end_src

Y vemos como, en ~build/~, se mantiene la estructura de paquetes:

build/
└── com
    └── proferoman
        ├── hw1
        │   └── HelloWorld.class
        ├── hw2
        │   └── HelloWorld.class
        └── Main.class

Y, otro cambio más, a la hora de ejecutar tenemos que indicar la clase principal especificando su paquete completo:

#+begin_src shell
  $ java -cp build com.proferoman.Main
#+end_src
** Práctica: paquetes en Java
Hace una práctica en la que tiene que usar paquetes y construir el programa en la carpeta build.
** Ninja Training
Si tenemos tiempo y fuera necesario tengo preparado un Ninja Training en el que tiene que programar y construir el proyecto que ellos mismos programa.
** Práctica: paquetes en Java
Hacen una nueva práctica para reforzar esta parte.
* JAR (Java ARchive)
** Ninja Training
Este Ninja Training va a ser una práctica guiada en la que yo, y todo el alumnado, vamos a realizar todos estos pasos y voy explicando qué hace cada paso.

Partimos del Ninja Training anterior, donde tenemos un proyecto con paquetes y esta estructura:

04_jar
├── build
├── README.md
└── src
    └── main
        └── java
            └── com
                └── proferoman
                    ├── hw1
                    │   └── HelloWorld.java
                    ├── hw2
                    │   └── HelloWorld.java
                    └── Main.java                    
                    
*** Paso 1: explicar qué son los ficheros JAR
En Java, es común agrupar varios archivos .class en un solo archivo para facilitar su manejo y distribución. Por esta razón, se utilizan los archivos JAR (Java ARchive files). Este formato permite empaquetar nuestros programas Java de manera sencilla, facilitando su distribución y ejecución al concentrar todos los componentes necesarios en un único archivo .jar.
*** Paso 2: explicar el contenido de los ficheros JAR
En los ficheros JAR se incluyen:
- Todos los .class
- Un archivo de manifiesto (opcional) con información sobre el contenido del fichero JAR (metadatos)
- Archivos de recurso como: configuraciones, imágnenes, logotipos, iconos, cadenas de traducción...
- Cualquier otro archivo necesario para la aplicación
*** Paso 3: sobre el archivo de manifiesto
- En este archivo de manifiesto se especifican metadatos.
- Estos metadatos se especifican con pares "clave-valor".
- Si se pretende que el archivo JAR sea ejecutable hay que especificar la clase principal
*** Paso 4: generar jar en acción
Partimos del proyecto que hay en la carpeta del Ninja Training con esta estructura:

04_jar/
├── build
├── README.md
└── src
    └── main
        └── java
            └── com
                └── proferoman
                    ├── hw1
                    │   └── HelloWorld.java
                    ├── hw2
                    │   └── HelloWorld.java
                    └── Main.java

Vamos a incluir el archivo "manifest". Creálo en ~src/main/resources/META-INFO/MANIFEST.MF~ y añade lo siguiente en él:
#+begin_src mf
  Manifest-Version: 1.0
  Created-By: Román Martínez
  Main-Class: com.proferoman.Main
#+end_src

Ahora, ya puedes construir el programa:
#+begin_src shell
  $ javac -d build src/main/java/com/proferoman/*.java src/main/java/com/proferoman/hw1/*.java src/main/java/com/proferoman/hw2/*.java
#+end_src

Empaquetarlo en un jar:
#+begin_src shell
  # Crea el JAR con los archivos .class compilados
  $ jar -cvfm build/miprograma.jar src/main/resources/META-INF/MANIFEST.MF -C build .
#+end_src

Significado de las opciones ~-cvfm~:
- c :: o --create se emplea para indicar a jar que tiene que crear el fichero
- v :: o --verbose se emplea para que nos informe con detalle de lo qué pase
- f :: o --file se emplea para indicar el nombre del fichero JAR resultante
- m :: o --manifest se emplea para indicar el fichero con el manifest

*** Paso 5: ejecutar programa en Java empaquetado en un jar
Y ejecutarlo:
#+begin_src shell
  $ java -jar build/miprograma.jar
#+END_SRC
** Práctica: empaquetar programa en JAR
En esta práctica construirán un programa en Java usando paquetes para, a continuación, empaquetarlo en formato JAR.
* Práctica refuerzo de todo lo visto hasta ahora
* Examen: construir básico, construir paquetes y JAR
* Crear bibliotecas y añadirlas a proyectos (JAR)
** Ninja Training
En la carpeta con los Ninja Trainig tengo una carpeta con un proyecto que vamos a empaquetar para usar como biblioteca, llamado *library* y una proyecto que lo usa (terminado) llamado *project*.

Esta es la jerarquía de directorios de *library*:
.
└── src
    └── main
        ├── java
        │   └── com
        │       └── example
        │           └── dateformatter
        │               └── DateFormatterUtil.java
        └── resources
            └── META-INF
                └── MANIFEST.MF

Los pasos que hay que llevar a cabo son estos:
1. Compilar: ~javac -d build src/main/java/com/example/dateformatter/DateFormatterUtil.java~
2. Empaquetar: ~jar -cvfm build/dateformatter-lib.jar src/main/resources/META-INF/MANIFEST.MF -C build .~

Ahora, para usar la librería en otro proyecto (al que he llamado *project*)
1. Creamos un proyecto con una estructura típica de paquetes en la que tenemos un nuevo directorio dentro de *src/main* llamado *libs* como ves aquí (donde metemos las librerías empaquetadas en .jar):

      .
   └── src
       └── main
           ├── java
           │   └── es
           │       └── eed
           │           └── App.java
           ├── libs
           │   └── dateformatter-lib.jar
           └── resources
               └── META-INF
                   └── MANIFEST.MF

2. Ahora, costruimos el proyecto con la biblioteca incluida (la novedad es que usamos la opción *-cp* para indicar donde están las bibliotecas a incluir):
   ~javac -cp src/main/libs/dateformatter-lib.jar -d build src/main/java/es/eed/App.java~

3. Y ejecutamos inluyendo las bibliotecas y todos los classpath separados por el carácter dos puntos (:):
   ~java -cp build:src/main/libs/dateformatter-lib.jar es.eed.App~

   En Windows hay que usar como separador el punto y coma (;) y hay que poner el classpath entre comillas:
   ~java -cp "build;src/main/libs/dateformatter-lib.jar" es.eed.App~

4. Crear un fat-jar con todas las dependencias dentro (a modo de información): habría que desempaquetar todas las bibliotecas para añadirlo todo al JAR final junto al proyecto. Resumen de pasos:
   - Compilar el proyecto
   - Crear el MANIFEST.MF con ~Main-Class: es.eed.APP~ para poder ejecutarlo (JAR ejecutable)
   - Extraer el contenido de la biblioteca a una carpeta temporal (~jar -xf src/main/libs/...jar~)
   - Empaquetar todo en un solo JAR: ~jar -cf programa.jar -C build/ . -C temp_lib/ .~
   - Ejecutar: ~java -jar programa.jar~

   En Maven se puede usar el plugin Maven Shade para hacerlo y en Gradle Shadow.
** Práctica
En esta práctica desarrolla (opcionalmente) una biblioteca y la integran en un proyecto de Java.
* Gradle
En el Ninja Training ~07_gradle_intro~ tengo hecho un ejercicio/proyecto básico con Gradle.
Tengo una presentación en la que guiaré al alumnado en el proceso de realizar los pasos que se describen en los siguientes apartados hasta la primera práctica.
** Teoría y conceptos básicos de Gradle
*** Descripción breve
Gradle automatiza la construcción, el testing y el despliegue de software a partir de información en ficheros de script.
*** Conceptos clave
- Projects :: pieza de software que puede ser construido como son aplicaciones y bibliotecas. Los proyectos (projects) pueden ser sencillos (single) o multi-proyectos (multi-projects).
- Build Scripts :: son scripts escritos en Groovy o Kotlin donde se indican los pasos que se tienen que dar para construir el proyecto. Pueden haber varios scripts como veremos después.
- Dependency Management :: técnica que permite indicar las dependencias de un proyecto (bibliotecas) y se especifica en los scripts de construcción.
- Tasks :: son las unidades básicas de trabajo como son: compilar, lanzar tests o ejecutar el proyecto.
- Plugins :: se utilizan para extender las capacidades de Gradle y opcionalmente para contribuir al número de tareas a realizar.
*** Jerarquía de directorios en Gradle
project
├── gradle                              
│   ├── libs.versions.toml              
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew                             
├── gradlew.bat                         
├── settings.gradle(.kts)               
├── subproject-a
│   ├── build.gradle(.kts)              
│   └── src                             
└── subproject-b
    ├── build.gradle(.kts)              
    └── src
** Iniciar proyecto Gradle: configuración de un script básico
*** Estructura proyecto
.
├── app
│   ├── build.gradle.kts
│   └── src
│       └── main
│           └── java
│               └── com
│                   └── proferoman
│                       └── App.java
└── settings.gradle.kts
*** settings.gradle.kts
#+begin_src
  // Nombre del proyecto
  rootProject.name = "my-first-project"

  // Incluimos los subproyectos
  include("app")
#+end_src
*** app/build.gradle.kts
#+begin_src
  /*
   * Añadimos plugins.
   *
   * Los plugins que añadamos proporcionan funcionalidades y proporionan tasks al
   * proyecto. Además, los plugins añaden propiedades y métodos al proyecto.
   *
   * El plugin "application" posibilita una aplicación JVM ejecutable: podemos
   * construir el proyecto y tener una aplicación JVM ejecutable.
   */
  plugins {
      id("application")
  }
  
  /*
   * Hemos añadido el plugin "application" y, por tanto, ahora tenemos disponible
   * ciertas propiedades y métodos.
   *
   * Aquí usamos la propiedad "mainClass" del método "application" para
   * especificar la clase principal.
   */
  application {
      mainClass = "com.proferoman.App"
  }
#+end_src
** Línea de comandos
Ver tareas:
#+begin_src
  $ gradle tasks
#+end_src

Construir el proyecto:
#+begin_src
  $ gradle build
#+end_src

Limpiar el proyecto (borra la carpeta build/):
#+begin_src
  $ gradle clean
#+end_src

Ejecutar el proyecto:
#+begin_src
  $ gradle run
#+end_src
** Local JAR
*No debemos usar JAR locales*. Uno de los motivos por los que surgen herramientas de construcción como Gradle es para manejar las dependencias de forma automática (lo vemos más adelante).

Anteriormente a herramientas como Gradle, las dependencias se descargaban en JAR y se metían en la carpeta "libs/" o "lib/".

No obstante, esta posibilidad existe en Gradle, sobre todo por si se desean incluir bibliotecas JAR personales.

*Tenemos dos opciones para incluir nuestros ficheros JAR*:

1. *Especificar Flat Directory* en ~build.gradle.kts~:
#+begin_src
  repositories {
      // Gradle buscará ficheros JAR en estos directorios
      flatDir {
          dirs("libs", "lib", "libs2", "lib2")
      }
  }
#+end_src

Y, ahora, en ~dependencies~ añadimos los jar que queramos:
#+begin_src
  dependencies {
      // El formato es: <prefijo único>:<nombre fichero JAR>:<version>
      implementation("com.example:dateformatter-lib:1.0.0")
  }
#+end_src

2. *Otra opción sería indicar los JAR directamente*:
#+begin_src
  implementation(files("libs/dateformatter-lib.jar", "libs/a.jar", "libs/b.jar"))
#+end_src
** Dependencias: Maven Repository
** Práctica: Gradle a mano
